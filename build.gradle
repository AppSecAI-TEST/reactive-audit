buildscript {
    repositories {
        maven {
            url "https://maven.eveoh.nl/content/repositories/releases"
        }
    }

    dependencies {
        classpath "nl.eveoh:gradle-aspectj:1.4"
    }
}

repositories {
    mavenCentral()
}

project.ext {
    aspectjVersion = '1.8.2'
}

/*
 * Copyright 2014 OCTO Technology
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'aspectj'
apply plugin: 'distribution'
apply plugin: 'maven'
apply plugin: 'eclipse'
apply plugin: 'idea'

sourceCompatibility = '7'
targetCompatibility = '7'

group = "com.octo.reactive.audit"
version = '0.0.3-SNAPSHOT' // Don't forget to update init-home and sub projets
description = 'JVM Agent to detect blocking IO call'

dependencies {
    compile project(":audit-reactive-lib")
    compile "org.aspectj:aspectjrt:${aspectjVersion}"
    compile "org.aspectj:aspectjtools:${aspectjVersion}"

    testCompile group: 'junit', name: 'junit', version: '4.11'
    testRuntime "org.aspectj:aspectjweaver:${aspectjVersion}"
    testRuntime "org.aspectj:aspectjrt:${aspectjVersion}"
    testRuntime "org.scala-lang:scala-library:2.11.1"
    testRuntime "org.apache.derby:derby:10.10.2.0"
}

task sourceJar(type: Jar) {
    from sourceSets.main.allJava
}

compileJava {
    // I only managed to get this working when I forked
    // and passed 'javac' as an executable
    options.compilerArgs << '-XDignore.symbol.file'
    options.fork = true
    options.forkOptions.executable = 'javac'
}

//jar {
    //println ("####="+project(":audit-reactive-lib").buildDir.findAll("/classes/main/java/**.class"))
//    println("---" + fileTree(dir: project(":audit-reactive-lib").buildDir).matching { include 'classes/main/java/**' })
//    def libcl=file(project(":audit-reactive-lib").buildDir.toString()+"/classes/main/")
//    println("CLASSDIR "+libcl)

//    into('') {
//        from file(project(":audit-reactive-lib").buildDir.toString()+"/classes/main/")
//    }
//}
task wrapper(type: Wrapper) {
    gradleVersion = '2.1'
}

test {
    testLogging.showStandardStreams = true
//    beforeTest { descriptor ->
//        logger.lifecycle("Running test: " + descriptor)
//    }

    include 'com/octo/reactive/audit/**'

    def weaver = "-javaagent:" +
            project.configurations.testRuntime.find { it.name.startsWith("aspectjweaver-") }
    def auditReactiveConf = "-DauditReactive=src/test/resources/testAuditReactive.properties"
    def logConfig = "-Djava.util.logging.config.file=src/test/resources/testLogging.properties"
    jvmArgs = [weaver, auditReactiveConf, logConfig]
}

distributions {
    main {
        contents {
            into('bin') {
                from { 'src/main/dist/bin' }
                fileMode = 0755
            }
            into('lib') {
                from project(':audit-reactive-lib').jar
                from jar
                rename { it.substring(0, it.indexOf(version) - 1) + it.substring(it.lastIndexOf("."), it.size()) }
            }
            into('lib') {
                from project.configurations.testRuntime.find { it.name.startsWith("aspectjweaver-") }
                rename { "aspectjweaver.jar" }
            }
        }
    }
}

